
public class Greeter {

    private String greeting;
    
    public Greeter(String g) {
	System.out.println("In the constructor");
	greeting = g;
    }

    /* We can overload methods (including constructors) which means we
       have more than one method with the same name. They just have to
       have different "signatures" which means different parameter
       types. Java figures out which one to run by matching parameter types
    */
    public Greeter() {
	greeting = "Hello world!";
    }
    

    // regular methods

    public void setGreeting(String s) {
	greeting = s;
    }

    public String greetPerson(String name) {
	return greeting+" "+name;
    }

    public String loudGreeting() {
	return greeting.toUpperCase();
    }


    // String is the "return type" that is, the type of the data that we
    // will send back using the return statement.
    // void is a special "return type" which means we won't be returning any
    // value
    public String getGreeting() {
	return greeting;
    }
	

    /* our original greet just printed the greeting.
       Generally, we want our methods to return information and only print if 
       they are SPECIFICALLY designed to print.
     */
    public String greet() {
	return greeting;
    }

    public void ungreet() {
	System.out.println(greeting);
    }
}
